<!DOCTYPE html>
<!-- saved from url=(0040)http://bl.ocks.org/mbostock/raw/3884955/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

</style>
<style id="clearly_highlighting_css" type="text/css">/* selection */ html.clearly_highlighting_enabled ::-moz-selection { background: rgba(246, 238, 150, 0.99); } html.clearly_highlighting_enabled ::selection { background: rgba(246, 238, 150, 0.99); } /* cursor */ html.clearly_highlighting_enabled {    /* cursor and hot-spot position -- requires a default cursor, after the URL one */    cursor: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--cursor.png") 14 16, text; } /* highlight tag */ em.clearly_highlight_element {    font-style: inherit !important; font-weight: inherit !important;    background-image: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--yellow.png");    background-repeat: repeat-x; background-position: top left; background-size: 100% 100%; } /* the delete-buttons are positioned relative to this */ em.clearly_highlight_element.clearly_highlight_first { position: relative; } /* delete buttons */ em.clearly_highlight_element a.clearly_highlight_delete_element {    display: none; cursor: pointer;    padding: 0; margin: 0; line-height: 0;    position: absolute; width: 34px; height: 34px; left: -17px; top: -17px;    background-image: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--delete-sprite.png"); background-repeat: no-repeat; background-position: 0px 0px; } em.clearly_highlight_element a.clearly_highlight_delete_element:hover { background-position: -34px 0px; } /* retina */ @media (min--moz-device-pixel-ratio: 2), (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) {    em.clearly_highlight_element { background-image: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--yellow@2x.png"); }    em.clearly_highlight_element a.clearly_highlight_delete_element { background-image: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--delete-sprite@2x.png"); background-size: 68px 34px; } } </style><style type="text/css"></style><style>[touch-action="none"]{ -ms-touch-action: none; touch-action: none; }[touch-action="pan-x"]{ -ms-touch-action: pan-x; touch-action: pan-x; }[touch-action="pan-y"]{ -ms-touch-action: pan-y; touch-action: pan-y; }[touch-action="scroll"],[touch-action="pan-x pan-y"],[touch-action="pan-y pan-x"]{ -ms-touch-action: pan-x pan-y; touch-action: pan-x pan-y; }</style></head><body cz-shortcut-listen="true">
<script src="./3884955_files/d3.v3.js"></script>
<script>

var margin = {
	top : 20,
	right : 80,
	bottom : 30,
	left : 50
},
width = 960 - margin.left - margin.right,
height = 500 - margin.top - margin.bottom;

var parseDate = d3.time.format("%Y%m%d").parse;

var x = d3.time.scale()
	.range([0, width]);

var y = d3.scale.linear()
	.range([height, 0]);

var color = d3.scale.category10();

var xAxis = d3.svg.axis()
	.scale(x)
	.orient("bottom");

var yAxis = d3.svg.axis()
	.scale(y)
	.orient("left");

var line = d3.svg.line()
	.interpolate("basis")
	.x(function (d) {
		return x(d.date);
	})
	.y(function (d) {
		return y(d.temperature);
	});

var svg = d3.select("body").append("svg")
	.attr("width", width + margin.left + margin.right)
	.attr("height", height + margin.top + margin.bottom)
	.append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.tsv("data.tsv", function (error, data) {
	var keys = d3.keys(data[0]).filter(function (key) {
			return key !== "date";
		})
		color.domain(keys);

	var legend = svg.selectAll(".legend")
		.data(keys)
		.enter().append("g")
		.attr("class", "legend")
		.attr("transform", function (d, i) {
			return "translate(0," + i * 20 + ")";
		});

	legend.append("rect")
	.attr("x", width - 18)
	.attr("width", 18)
	.attr("height", 18)
	.style("fill", color);

	legend.append("text")
	.attr("x", width - 24)
	.attr("y", 9)
	.attr("dy", ".35em")
	.style("text-anchor", "end")
	.text(function (d) {
		return d;
	})
	.on('click', function (d) {
		changeCity(d);
	});

	data.forEach(function (d) {
		d.date = parseDate(d.date);
	});

	var cities = color.domain().map(function (name) {
			return {
				name : name,
				values : data.map(function (d) {
					return {
						date : d.date,
						temperature : +d[name]
					};
				})
			};
		});

	x.domain(d3.extent(data, function (d) {
			return d.date;
		}));

	y.domain([
			d3.min(cities, function (c) {
				return d3.min(c.values, function (v) {
					return v.temperature;
				});
			}),
			d3.max(cities, function (c) {
				return d3.max(c.values, function (v) {
					return v.temperature;
				});
			})
		]);
	var position = {}
	function changeCity(d) {
		var i = 0,
		l = cities.length,
		found;
		for (; i < l; i++) {
			if (cities[i]['name'] === d) {
				position[d] = i;
				position[d + 'Val'] = cities[i];
				cities.splice(i, 1);
				found = true
					break;
			}

		}

		if (!found) {
			cities.splice(position[d], 0, position[d + 'Val'])
		}
		y.domain([
				d3.min(cities, function (c) {
					return d3.min(c.values, function (v) {
						return v.temperature;
					});
				}),
				d3.max(cities, function (c) {
					return d3.max(c.values, function (v) {
						return v.temperature;
					});
				})
			]);

		console.log(city)
		draw()

	}

	var city;

	svg.append("g")
	.attr("class", "x axis")
	.attr("transform", "translate(0," + height + ")")
	.call(xAxis);

	function draw() {
		svg.selectAll('.city').remove();
		svg.selectAll('.y').remove();

		svg.append("g")
		.attr("class", "y axis")
		.call(yAxis)
		.append("text")
		.attr("transform", "rotate(-90)")
		.attr("y", 6)
		.attr("dy", ".71em")
		.style("text-anchor", "end")
		.text("Temperature (ÂºF)");

		city = svg.selectAll(".city")
			.data(cities)
			.enter().append("g")
			.attr("class", "city");
		city.append("path")
		.attr("class", "line")
		.attr("d", function (d) {
			return line(d.values);
		})
		.style("stroke", function (d) {
			return color(d.name);
		});

		city.append("text")
		.datum(function (d) {
			return {
				name : d.name,
				value : d.values[d.values.length - 1]
			};
		})
		.attr("transform", function (d) {
			return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")";
		})
		.attr("x", 3)
		.attr("dy", ".35em")
		.text(function (d) {
			return d.name;
		});
	}
	draw();

});



</script>